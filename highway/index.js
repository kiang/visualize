// Generated by LiveScript 1.2.0
var ref$, w, h, main;
ref$ = [900, 600], w = ref$[0], h = ref$[1];
main = function($scope, $http){
  $scope.xaxis = d3.scale.linear().domain([150, w - 150]).range([0, w]);
  $scope.force = d3.layout.force().gravity(0.09).charge(function(it){
    return (it.name.length - 2) * -50 - 80;
  });
  $scope.start = null;
  $scope.end = "";
  $scope.miles = 0;
  $scope.price = 0;
  $scope.choosed = [];
  return $http.get('no1.json').success(function(data){
    var count, nodes, res$, i$, ref$, len$, i, n, links, to$, sumOfMiles, route, draw, x$, y$, z$, z1$, z2$, z3$, z4$;
    $scope.names = data.names.filter(function(it){
      return it;
    });
    count = $scope.names.length;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = $scope.names).length; i$ < len$; ++i$) {
      i = i$;
      n = ref$[i$];
      res$.push({
        weight: 1,
        name: n,
        x: w / 2 + h * Math.cos(6.28 * i / count) / 2,
        y: h / 2 + h * Math.sin(6.28 * i / count) / 2
      });
    }
    nodes = res$;
    res$ = [];
    for (i$ = 1, to$ = $scope.names.length; i$ < to$; ++i$) {
      i = i$;
      res$.push({
        source: nodes[i - 1],
        target: nodes[i]
      });
    }
    links = res$;
    $scope.force.nodes(nodes).links(links).size([w, h]).start();
    sumOfMiles = function(s, e){
      var retMiles, retPrice;
      s = data.names.indexOf(s);
      e = data.names.indexOf(e);
      if (s < 0 || e < 0) {
        return NaN;
      }
      retMiles = data.miles.slice(s, e).reduce(function(a, b){
        return a + b;
      }, 0);
      retPrice = data.price.slice(s, e).reduce(function(a, b){
        return a + b;
      }, 0) - 24;
      retPrice >= 0 || (retPrice = 0);
      if (retPrice > 240) {
        retPrice = 240 + (retPrice - 240) * 0.75;
      }
      return [retMiles, retPrice, parseInt(retPrice * 9) / 10];
    };
    route = function(){
      var passed, i$, ref$, len$, item, n, ret;
      passed = false;
      for (i$ = 0, len$ = (ref$ = nodes).length; i$ < len$; ++i$) {
        item = ref$[i$];
        if (item.selected && $scope.choosed.length === 2) {
          passed = !passed;
        }
        item.passed = passed;
      }
      if ($scope.choosed.length === 2) {
        n = nodes.filter(function(it){
          return it.selected;
        });
        ret = sumOfMiles(n[0].name, n[1].name);
        return $scope.$apply(function(){
          $scope.price = parseInt(ret[1] * 10) / 10;
          $scope.miles = parseInt(ret[0] * 10) / 10;
          $scope.start = n[0].name;
          return $scope.end = n[1].name;
        });
      } else {
        return $scope.$apply(function(){
          return $scope.start = null;
        });
      }
    };
    draw = function(){
      d3.select('#svg').selectAll('g.link').select('line').attr('x1', function(it){
        return $scope.xaxis(it.source.x);
      }).attr('y1', function(it){
        return it.source.y;
      }).attr('x2', function(it){
        return $scope.xaxis(it.target.x);
      }).attr('y2', function(it){
        return it.target.y;
      });
      return d3.select('#svg').selectAll('g.site').attr('transform', function(it){
        return "translate(" + $scope.xaxis(it.x) + " " + it.y + ")";
      }).select('circle').attr('fill', function(it){
        if (it.selected) {
          return '#f0f';
        } else if (it.passed) {
          return '#0f0';
        } else {
          return '#fff';
        }
      });
    };
    x$ = d3.select('#svg');
    y$ = x$.append('g');
    z$ = y$.selectAll('g.link').data(links);
    z$.exit().remove();
    z1$ = z$.enter().append('g');
    z1$.attr('class', 'link');
    z1$.append('line');
    z2$ = x$.append('g');
    z3$ = z2$.selectAll('g.site').data(nodes);
    z3$.exit().remove();
    z4$ = z3$.enter().append('g');
    z4$.attr('class', 'site');
    z4$.attr('transform', function(it){
      return "translate(" + $scope.xaxis(it.x) + " " + it.y + ")";
    });
    z4$.append('circle').attr('r', '5px');
    z4$.append('text').attr('class', 'text-bg').attr('dy', '18px').text(function(it){
      return it.name;
    });
    z4$.append('text').attr('class', 'text-fg').attr('dy', '18px').text(function(it){
      return it.name;
    });
    z4$.on('click', function(it){
      if ($scope.choosed.length === 2 && !it.selected) {
        $scope.choosed[0].selected = false;
      }
      it.selected = !it.selected;
      $scope.$apply(function(){
        return $scope.choosed = nodes.filter(function(it){
          return it.selected;
        });
      });
      route();
      return draw();
    });
    return $scope.force.on('tick', draw);
  });
};