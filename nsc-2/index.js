// Generated by LiveScript 1.2.0
var ref$, w, h, rMin, rMax, rShow, transTime, rShowText, mg, budgetCtrl;
ref$ = [900, 600, 50], w = ref$[0], h = ref$[1];
ref$ = [2, 50], rMin = ref$[0], rMax = ref$[1];
rShow = 5;
transTime = 5000;
rShowText = 15;
mg = 60;
budgetCtrl = function($scope){
  return d3.json('budget.json', function(data){
    var force, yearS, yearE, hash, main, idx, update;
    force = d3.layout.force().gravity(1.0).charge(function(it){
      return -0 - it.charge;
    }).size([w - 2 * mg, h - 2 * mg]);
    yearS = 101;
    yearE = 102;
    hash = {};
    main = function(data){
      var keys, res$, k, hkeys, newkeys, delkeys, i$, len$, r, ref$, v, rMap, delta, dMin, dMax, c1, c2, deltaMap, list, it, color, mouseover, x$, y$, z$, z1$, z2$, z3$, z4$, z5$, z6$, z7$, z8$, z9$, items, kl, i, cgroups, tgroups;
      $scope.$apply(function(){
        $scope.yearS = yearS;
        return $scope.yearE = yearE;
      });
      res$ = [];
      for (k in data[yearS]) {
        res$.push(k);
      }
      keys = res$;
      res$ = [];
      for (k in hash) {
        res$.push(k);
      }
      hkeys = res$;
      newkeys = [];
      delkeys = [];
      for (k in data[yearE]) {
        if (!(k in data[yearS])) {
          keys.push(k);
        }
      }
      for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
        k = keys[i$];
        if (!(k in hash)) {
          newkeys.push(k);
        }
      }
      for (i$ = 0, len$ = hkeys.length; i$ < len$; ++i$) {
        k = hkeys[i$];
        if (!in$(k, keys)) {
          delkeys.push(k);
        }
      }
      for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
        k = keys[i$];
        hash[k] = import$(hash[k] || {}, {
          name: k,
          value: parseInt((data[yearE][k] || 0) / 10),
          r: Math.sqrt(~~(data[yearE][k] || 0)),
          delta: (data[yearE][k] - data[yearS][k] || 0) / (data[yearS][k] || 1)
        });
      }
      for (i$ = 0, len$ = delkeys.length; i$ < len$; ++i$) {
        k = delkeys[i$];
        hash[k].r = 0;
        hash[k].delta = 0;
      }
      res$ = [];
      for (k in ref$ = hash) {
        v = ref$[k];
        res$.push(v.r);
      }
      r = res$;
      rMap = d3.scale.linear().domain([d3.min(r), d3.max(r)]).range([rMin, rMax]);
      for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
        k = keys[i$];
        if (rMap(hash[k].r) <= rShow) {
          hash[k].delta = 0;
        }
      }
      res$ = [];
      for (k in ref$ = hash) {
        v = ref$[k];
        res$.push(v.delta);
      }
      delta = res$;
      ref$ = [d3.min(delta), d3.max(delta)], dMin = ref$[0], dMax = ref$[1];
      c1 = d3.scale.linear().domain([0, 255]).range(['#f00', '#ff0']);
      c2 = d3.scale.linear().domain([0, 255]).range(['#ff0', '#0ff']);
      deltaMap = d3.scale.linear().domain([dMax > (ref$ = -dMin) ? dMax : ref$, 0]).range([mg + rMax, h - rMax - mg]);
      res$ = [];
      for (k in ref$ = hash) {
        it = ref$[k];
        it.cx = w / 2 + Math.random() * (w / 2 - rMax - mg) * (it.delta > 0
          ? 1
          : -1);
        it.cy = deltaMap(Math.abs(it.delta));
        it.r = rMap(it.r);
        it.charge = 0;
        color = parseInt(255 - 255 * Math.abs(it.delta) / dMax);
        it.fill = it.delta > 0
          ? c1(color)
          : c2(color);
        res$.push(it);
      }
      list = res$;
      for (i$ = 0, len$ = delkeys.length; i$ < len$; ++i$) {
        k = delkeys[i$];
        hash[k].r = 0;
        hash[k].delta = 0;
      }
      force.nodes(list);
      mouseover = function(n){
        if (n.r > rShow) {
          return $scope.$apply(function(){
            return $scope.name = n.name, $scope.value = n.value, n;
          });
        }
      };
      x$ = d3.select('#svg g.circles').selectAll('g.circle-group').data(list).enter().append('g');
      x$.attr('class', "circle-group root-group");
      x$.attr('transform', function(it){
        return "translate(" + it.cx + "," + it.cy + ")";
      });
      x$.style('opacity', 0);
      x$.on('mouseover', mouseover);
      y$ = x$.append('g');
      y$.attr('class', 'force-group');
      z$ = y$.append('circle');
      z$.attr('stroke', "rgba(0,0,0,0.3)").attr('r', 0);
      z1$ = d3.select('#svg g.texts').selectAll('g.text-group').data(list).enter().append('g');
      z1$.attr('class', "text-group root-group");
      z1$.attr('transform', function(it){
        return "translate(" + it.cx + "," + it.cy + ")";
      });
      z1$.on('mouseover', mouseover);
      z2$ = z1$.append('g');
      z2$.attr('class', 'force-group');
      z2$.style('opacity', 0);
      z3$ = z2$.append('text');
      z3$.attr('class', 'bk');
      z3$.text(function(it){
        return it.name;
      });
      z4$ = z2$.append('text');
      z4$.text(function(it){
        return it.name;
      });
      z5$ = d3.select('#svg').selectAll('g.circle-group');
      z5$.attr('class', function(it){
        return "circle-group root-group" + (it.r <= rShow ? '' : ' active');
      });
      z5$.transition().duration(transTime).attr('transform', function(it){
        return "translate(" + it.cx + "," + it.cy + ")";
      }).style('opacity', function(it){
        if (it.r <= rShow) {
          return 0;
        } else {
          return 1;
        }
      });
      z6$ = z5$.select('g.force-group');
      z6$.attr('transform', function(it){
        return "translate(" + (it.x - w / 2) + "," + (it.y - h / 2) + ")";
      });
      z7$ = z5$.select('circle');
      z7$.transition().duration(transTime).attr('r', function(it){
        return it.r;
      }).attr('fill', function(it){
        return it.fill;
      });
      z8$ = d3.select('#svg').selectAll('g.text-group');
      z8$.attr('class', function(it){
        return "text-group root-group" + (it.r <= rShowText ? '' : ' active');
      });
      z8$.transition().duration(transTime).attr('transform', function(it){
        return "translate(" + it.cx + "," + it.cy + ")";
      });
      z9$ = z8$.select('g.force-group');
      z9$.attr('transform', function(it){
        return "translate(" + (it.x - w / 2) + "," + (it.y - h / 2) + ")";
      });
      keys = (function(){
        var results$ = [];
        for (k in hash) {
          results$.push(k);
        }
        return results$;
      }()).filter(function(it){
        return hash[it].r > rShow;
      });
      items = keys.map(function(it){
        return hash[it];
      });
      kl = keys.length;
      force.on('tick', function(it){
        var i$, to$, i, lresult$, j$, to1$, j, jt, r, dtx, dty, d, dr, results$ = [];
        for (i$ = 0, to$ = kl; i$ < to$; ++i$) {
          i = i$;
          lresult$ = [];
          for (j$ = 0, to1$ = kl; j$ < to1$; ++j$) {
            j = j$;
            if (i === j) {
              continue;
            }
            it = items[i];
            jt = items[j];
            r = it.r + jt.r;
            dtx = it.x + it.cx - jt.x - jt.cx;
            dty = it.y + it.cy - jt.y - jt.cy;
            d = dtx * dtx + dty * dty;
            if (r * r > d) {
              d = Math.sqrt(d);
              dr = (r - d) / (d * 1);
              it.x = it.x + dtx * dr;
              lresult$.push(it.y = it.y + dty * dr);
            }
          }
          results$.push(lresult$);
        }
        return results$;
      });
      force.start();
      for (i$ = 0; i$ <= 100; ++i$) {
        i = i$;
        force.tick();
      }
      force.stop();
      cgroups = d3.select('#svg').selectAll('g.circle-group.active').select('g.force-group').transition().duration(transTime).attr('transform', function(it){
        return "translate(" + (it.x - w / 2) + "," + (it.y - h / 2) + ")";
      });
      return tgroups = d3.select('#svg').selectAll('g.text-group.active').select('g.force-group').transition().duration(transTime).attr('transform', function(it){
        return "translate(" + (it.x - w / 2) + "," + (it.y - h / 2) + ")";
      }).style('opacity', function(it){
        if (it.r <= rShowText) {
          return '0';
        } else {
          return '1';
        }
      });
    };
    idx = 79;
    update = function(){
      yearS = idx;
      yearE = idx + 1;
      idx = idx + 1;
      if (idx > 101) {
        idx = 79;
      }
      return main(data);
    };
    update();
    return setInterval(update, 5100);
  });
};
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}