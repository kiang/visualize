// Generated by LiveScript 1.2.0
var update;
update = null;
$(document).ready(function(){
  return d3.json('ttsinterpellation', function(data){
    var ref$, w, h, hashSpeaker, speakerKeyword, i$, len$, it, j$, len1$, name, speaker, res$, hash, kw, color, speakerRoot, svg, root, draw, resize, cloud;
    ref$ = [$('#content').width(), $('#content').height()], w = ref$[0], h = ref$[1];
    data = data.entries;
    hashSpeaker = {};
    speakerKeyword = {};
    for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
      it = data[i$];
      for (j$ = 0, len1$ = (ref$ = it.asked_by).length; j$ < len1$; ++j$) {
        name = ref$[j$];
        if (!(name in speakerKeyword)) {
          speakerKeyword[name] = [];
        }
        speakerKeyword[name] = speakerKeyword[name].concat(it.keywords);
      }
    }
    speaker = (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = data).length; i$ < len$; ++i$) {
        it = ref$[i$];
        results$.push(it.asked_by);
      }
      return results$;
    }()).reduce(function(a, b){
      return a.concat(b);
    }, []).map(function(it){
      it = it.trim();
      if (!(it in hashSpeaker)) {
        hashSpeaker[it] = 0;
      }
      return hashSpeaker[it]++;
    });
    res$ = [];
    for (it in hashSpeaker) {
      res$.push({
        name: it,
        count: hashSpeaker[it]
      });
    }
    speaker = res$;
    hash = {};
    res$ = [];
    for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
      it = data[i$];
      res$.push(it.keywords);
    }
    kw = res$;
    (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = data).length; i$ < len$; ++i$) {
        it = ref$[i$];
        results$.push(it.keywords);
      }
      return results$;
    }()).reduce(function(a, b){
      return a.concat(b);
    }, []).map(function(it){
      it = it.trim();
      if (!(it in hash)) {
        hash[it] = 0;
      }
      return hash[it]++;
    });
    res$ = [];
    for (it in hash) {
      res$.push({
        text: it,
        size: 10 + 50 * Math.random() * hash[it]
      });
    }
    kw = res$;
    for (i$ = 0, len$ = kw.length; i$ < len$; ++i$) {
      it = kw[i$];
      it.allSize = it.size;
    }
    color = d3.scale.category20();
    speakerRoot = d3.select('#speaker');
    svg = d3.select('#content').append('svg').attr('width', '100%').attr('height', '100%');
    root = svg.append('g').attr('transform', "translate(" + w / 2 + "," + h / 2 + ")");
    draw = function(){
      var x$, y$;
      console.log('draw!');
      x$ = speakerRoot.selectAll('div.avatar').data(speaker);
      x$.exit().remove();
      x$.enter().append('div').attr('class', 'avatar').each(function(d){
        var x$;
        x$ = d3.select(this);
        x$.append('img');
        x$.append('div');
        return x$;
      });
      speakerRoot.selectAll('div.avatar').each(function(d){
        var x$;
        x$ = d3.select(this);
        x$.select('img').attr('src', function(){
          var avatar;
          avatar = CryptoJS.MD5("MLY/" + d.name).toString();
          return "http://avatars.io/50a65bb26e293122b0000073/" + avatar + "?size=medium";
        });
        x$.select('div').attr('class', 'name').text(d.name);
        x$.on('click', function(){
          return resize(d.name);
        });
        return x$;
      });
      y$ = root.selectAll('text.cloud').data(kw);
      y$.exit().remove();
      y$.enter().append('text').attr('class', 'cloud').style('font-family', "century gothic").style('fill', function(d, i){
        return color(i);
      }).attr('text-anchor', "middle").text(function(it){
        return it.text;
      });
      return root.selectAll('text.cloud').transition().duration(1000).style('font-size', function(it){
        return it.size + "px";
      }).attr('transform', function(it){
        return "translate(" + it.x + "," + it.y + ") rotate(" + it.rotate + ")";
      });
    };
    resize = function(name){
      var keyword, i$, ref$, len$, it;
      keyword = speakerKeyword[name];
      for (i$ = 0, len$ = (ref$ = kw).length; i$ < len$; ++i$) {
        it = ref$[i$];
        it.size = in$(it.text, keyword) ? 100 : 10;
      }
      return update();
    };
    cloud = d3.layout.cloud().size([w, h]).words(kw);
    update = function(){
      return cloud.words(kw).padding(0).rotate(0).font("century gothic").fontSize(function(it){
        return it.size;
      }).on('end', draw).start();
    };
    return update();
  });
});
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}