// Generated by LiveScript 1.2.0
var d1, ref$, unique, pairsToObj, sum, flatten, keys, d41, color, partyColor, constuiencyMap, topo;
d1 = new Date();
ref$ = require('prelude-ls'), unique = ref$.unique, pairsToObj = ref$.pairsToObj, sum = ref$.sum, flatten = ref$.flatten, keys = ref$.keys;
d41 = 0;
color = d3.scale.category20();
partyColor = d3.scale.ordinal().domain(['KMT', 'DPP', 'PFP', 'TSU', 'NSU', 'NON']).range(['#0D2393', '#009900', '#FF6211', '#994500', '#CD1659', '#999999']);
constuiencyMap = {
  CHA: '彰化縣',
  CYI: '嘉義市',
  CYQ: '嘉義縣',
  HSQ: '新竹縣',
  HSZ: '新竹市',
  HUA: '花蓮縣',
  ILA: '宜蘭縣',
  KEE: '基隆市',
  KHH: '高雄市',
  KHQ: '高雄縣',
  MIA: '苗栗縣',
  NAN: '南投縣',
  PEN: '澎湖縣',
  PIF: '屏東縣',
  TAO: '桃園縣',
  TNN: '台南市',
  TNQ: '台南縣',
  TPE: '台北市',
  TPQ: '新北市',
  TTT: '台東縣',
  TXG: '台中市',
  TXQ: '台中縣',
  YUN: '雲林縣'
};
topo = [];
$(document).ready(function(){
  var lg;
  lg = {};
  return d3.json('mly-8-with-sex.json', function(data){
    var d2, i$, len$, it;
    d2 = new Date();
    for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
      it = data[i$];
      lg[it.name] = it;
    }
    return d3.json('ttsinterpellation.compact.json', function(data){
      var d31, allData, d32, filter, askedByFilter, partyFilter, lastnameFilter, sexFilter, constuiencyFilter, d33, words, d4, update;
      d31 = new Date();
      console.log(data.entries);
      allData = data.entries;
      allData = allData.map(function(it){
        if (!it.asked_by) {
          it.asked_by = [];
        }
        return it;
      }).filter(function(it){
        var x;
        return (function(){
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = it.asked_by).length; i$ < len$; ++i$) {
            x = ref$[i$];
            results$.push(lg[x]);
          }
          return results$;
        }()).filter(function(it){
          return it;
        }).length > 0;
      });
      d32 = new Date();
      filter = crossfilter(allData);
      console.log(filter.groupAll().value());
      askedByFilter = filter.dimension(function(it){
        return it.asked_by;
      });
      partyFilter = filter.dimension(function(it){
        return it.asked_by.map(function(it){
          return lg[it].party;
        });
      });
      lastnameFilter = filter.dimension(function(it){
        return it.asked_by.map(function(it){
          return it.substring(0, 1);
        });
      });
      sexFilter = filter.dimension(function(it){
        return it.asked_by.map(function(it){
          return lg[it].sex;
        });
      });
      constuiencyFilter = filter.dimension(function(it){
        return it.asked_by.map(function(it){
          return lg[it].constuiency[0];
        });
      });
      d33 = new Date();
      words = {};
      ['topic', 'category', 'keywords'].map(function(n){
        var it, i$, ref$, len$, ref1$, k, v;
        (words[n] || (words[n] = {})).hash = {};
        words[n].filter = filter.dimension(function(it){
          return it[n];
        });
        words[n].list = flatten((function(){
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = allData).length; i$ < len$; ++i$) {
            it = ref$[i$];
            results$.push(it[n]);
          }
          return results$;
        }()));
        for (i$ = 0, len$ = (ref$ = words[n].list).length; i$ < len$; ++i$) {
          it = ref$[i$];
          (ref1$ = words[n].hash)[it] >= 0 || (ref1$[it] = 0);
          words[n].hash[it]++;
        }
        return words[n].list = [
          (ref$ = (function(){
            var ref$, results$ = [];
            for (k in ref$ = words[n].hash) {
              v = ref$[k];
              results$.push({
                text: k,
                rawSize: v
              });
            }
            return results$;
          }()).sort(function(a, b){
            return b.rawSize - a.rawSize;
          }))[0], ref$[1], ref$[2], ref$[3], ref$[4], ref$[5], ref$[6], ref$[7], ref$[8], ref$[9], ref$[10], ref$[11], ref$[12], ref$[13], ref$[14], ref$[15], ref$[16], ref$[17], ref$[18], ref$[19], ref$[20], ref$[21], ref$[22], ref$[23], ref$[24], ref$[25], ref$[26], ref$[27], ref$[28], ref$[29], ref$[30], ref$[31], ref$[32], ref$[33], ref$[34], ref$[35], ref$[36], ref$[37], ref$[38], ref$[39], ref$[40], ref$[41], ref$[42], ref$[43], ref$[44], ref$[45], ref$[46], ref$[47], ref$[48], ref$[49], ref$[50], ref$[51], ref$[52], ref$[53], ref$[54], ref$[55], ref$[56], ref$[57], ref$[58], ref$[59], ref$[60], ref$[61], ref$[62], ref$[63], ref$[64], ref$[65], ref$[66], ref$[67], ref$[68], ref$[69], ref$[70], ref$[71], ref$[72], ref$[73], ref$[74], ref$[75], ref$[76], ref$[77], ref$[78], ref$[79], ref$[80], ref$[81], ref$[82], ref$[83], ref$[84], ref$[85], ref$[86], ref$[87], ref$[88], ref$[89], ref$[90], ref$[91], ref$[92], ref$[93], ref$[94], ref$[95], ref$[96], ref$[97], ref$[98], ref$[99], ref$[100], ref$[101], ref$[102], ref$[103], ref$[104], ref$[105], ref$[106], ref$[107], ref$[108], ref$[109], ref$[110], ref$[111], ref$[112], ref$[113], ref$[114], ref$[115], ref$[116], ref$[117], ref$[118], ref$[119], ref$[120], ref$[121], ref$[122], ref$[123], ref$[124], ref$[125], ref$[126], ref$[127], ref$[128], ref$[129], ref$[130], ref$[131], ref$[132], ref$[133], ref$[134], ref$[135], ref$[136], ref$[137], ref$[138], ref$[139], ref$[140], ref$[141], ref$[142], ref$[143], ref$[144], ref$[145], ref$[146], ref$[147], ref$[148], ref$[149]
        ].filter(function(it){
          return it;
        });
      });
      d4 = new Date();
      update = function(data){
        var d5, unique2, unique3, ref$, category, keywords, topic, askedBy, party, sex, constuiency, curSet, curNum, d51, sexGroup, sexRatio, d52, partyGroup, partyHash, i$, len$, item, j$, len1$, p, partyRatio, radius, pie, arc, partyRoot, x$, y$, d53, constuiencyGroup, constuiencyHash, constuiencyMax, it, d54, askedByGroup, avg, askedByRatio, res$, num, z$, d55, group, d6, x, i, results$ = [];
        d5 = new Date();
        /*
        # use reduce + prelude.unique : too slow
        category = unique [x.category for x in data]reduce(((a,b)->a ++ b),[])
        keywords = unique [x.keywords for x in data]reduce(((a,b)->a ++ b),[])
        topic    = unique [x.topic for x in data]reduce(((a,b)->a ++ b),[])
        asked-by = unique [x.asked_by for x in data]reduce(((a,b)->a ++ b),[])
        party    = unique [x.asked_by.map(->lg[it]party) for x in data]reduce(((a,b)->a ++ b),[])
        sex      = unique [x.asked_by.map(->lg[it]sex) for x in data]reduce(((a,b)->a ++ b),[])
        lastname = unique [x.asked_by.map(->it.substring(0,1)) for x in data]reduce(((a,b)->a ++ b),[])
        constuiency = unique [x.asked_by.map(->lg[it]constuiency.0) for x in data]reduce(((a,b)->a ++ b),[])
        */
        unique2 = function(n, h){
          var i$, ref$, len$, x, j$, ref1$, len1$, it, results$ = [];
          h == null && (h = {});
          for (i$ = 0, len$ = (ref$ = data).length; i$ < len$; ++i$) {
            x = ref$[i$];
            for (j$ = 0, len1$ = (ref1$ = x[n] || []).length; j$ < len1$; ++j$) {
              it = ref1$[j$];
              h[it] = 1;
            }
          }
          for (x in h) {
            results$.push(x);
          }
          return results$;
        };
        unique3 = function(n, h){
          var i$, ref$, len$, x, j$, ref1$, len1$, it, results$ = [];
          h == null && (h = {});
          for (i$ = 0, len$ = (ref$ = data).length; i$ < len$; ++i$) {
            x = ref$[i$];
            for (j$ = 0, len1$ = (ref1$ = x.asked_by || []).length; j$ < len1$; ++j$) {
              it = ref1$[j$];
              h[n(it)] = 1;
            }
          }
          for (x in h) {
            results$.push(x);
          }
          return results$;
        };
        ref$ = ['category', 'keywords', 'topic', 'asked_by'].map(function(it){
          return unique2(it);
        }), category = ref$[0], keywords = ref$[1], topic = ref$[2], askedBy = ref$[3];
        ref$ = ['party', 'sex', 'constuiency'].map(function(n){
          return function(n){
            return function(it){
              return lg[it][n];
            };
          }(n);
        }), party = ref$[0], sex = ref$[1], constuiency = ref$[2];
        curSet = words.category.filter.top(Infinity);
        curNum = curSet.length;
        d51 = new Date();
        sexGroup = sexFilter.group().top(Infinity);
        sexRatio = (sexGroup[0].key[0] === '男'
          ? [0, 1]
          : [1, 0]).map(function(it){
          return sexGroup[it].value / curNum;
        });
        sexRatio = sexRatio.map(function(it){
          var ref$;
          return [it, (ref$ = it > 0.2 ? it : 0.2) < 0.8 ? ref$ : 0.8];
        });
        d3.select('#male.block').datum(sexRatio[0]);
        d3.select('#female.block').datum(sexRatio[1]);
        d3.selectAll('#gender .block').each(function(it){
          var x$;
          x$ = d3.select(this);
          x$.select('img').style('width', it[1] * 200 + "px");
          x$.select('.count').text(~~(it[0] * 100) + "%");
          return x$;
        });
        d52 = new Date();
        partyGroup = partyFilter.group().top(Infinity);
        partyHash = {};
        for (i$ = 0, len$ = partyGroup.length; i$ < len$; ++i$) {
          item = partyGroup[i$];
          for (j$ = 0, len1$ = (ref$ = item.key).length; j$ < len1$; ++j$) {
            p = ref$[j$];
            if (!p) {
              p = 'NON';
            }
            partyHash[p] >= 0 || (partyHash[p] = 0);
            partyHash[p] += item.value;
          }
        }
        partyRatio = ['KMT', 'DPP', 'PFP', 'TSU', 'NSU', 'NON'].map(function(it){
          return {
            name: it,
            value: partyHash[it] / curNum || 0
          };
        });
        radius = 100;
        pie = d3.layout.pie().sort(null).value(function(it){
          return it.value;
        });
        arc = d3.svg.arc().outerRadius(radius / 2.3).innerRadius(radius / 4.5);
        partyRoot = d3.select('#party svg').append('g').attr('transform', "translate(50 50)");
        x$ = partyRoot.selectAll('path.arc').data(pie(partyRatio));
        x$.exit().remove();
        x$.enter().append('path').attr('class', 'arc').attr('d', arc).attr('fill', function(it){
          return partyColor(it.data.name);
        });
        y$ = d3.select('#party .flags').selectAll('div.flag').data(partyRatio.sort(function(a, b){
          return b.value - a.value;
        }));
        y$.exit().remove();
        y$.enter().append('div').attr('class', 'flag').each(function(){
          var x$;
          x$ = d3.select(this);
          x$.append('i');
          x$.append('div').attr('class', 'title');
          return x$;
        });
        d3.select('#party .flags').selectAll('div.flag').each(function(){
          var x$;
          x$ = d3.select(this);
          x$.select('i').attr('class', function(it){
            return "g0v-icon large " + it.name;
          });
          x$.select('.title').text(function(it){
            return ~~(100 * it.value) + "%";
          });
          x$.on('click', function(it){
            console.log(it.name);
            partyFilter.filter(it.name);
            return update(words.category.filter.top(Infinity));
          });
          return x$;
        });
        d53 = new Date();
        constuiencyGroup = constuiencyFilter.group().top(Infinity);
        constuiencyHash = {};
        for (i$ = 0, len$ = constuiencyGroup.length; i$ < len$; ++i$) {
          item = constuiencyGroup[i$];
          for (j$ = 0, len1$ = (ref$ = item.key).length; j$ < len1$; ++j$) {
            p = ref$[j$];
            p = constuiencyMap[p];
            constuiencyHash[p] >= 0 || (constuiencyHash[p] = 0);
            constuiencyHash[p] += item.value;
          }
        }
        topo.features.map(function(it){
          return it.value = Math.sqrt((constuiencyHash[it.properties.COUNTYNAME] || 0) / curNum);
        });
        constuiencyMax = d3.max((function(){
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = topo.features).length; i$ < len$; ++i$) {
            it = ref$[i$];
            results$.push(it.value);
          }
          return results$;
        }()));
        d3.select('#county svg').selectAll('path.county').style('fill', function(it){
          var v;
          v = ~~(it.value * 255 / constuiencyMax);
          return "rgba(" + v + "," + ~~(v / 2) + "," + ~~(v / 3) + ", " + (0.5 + 0.5 * v / 255) + ")";
        });
        d54 = new Date();
        askedByGroup = askedByFilter.group().top(Infinity);
        avg = sum((function(){
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = askedByGroup).length; i$ < len$; ++i$) {
            it = ref$[i$];
            results$.push(1 + it.value || 1);
          }
          return results$;
        }())) / askedByGroup.length;
        res$ = [];
        for (i$ = 0, len$ = askedByGroup.length; i$ < len$; ++i$) {
          it = askedByGroup[i$];
          res$.push({
            name: it.key[0],
            value: (1 + it.value || 1) / avg,
            count: it.value
          });
        }
        askedByRatio = res$;
        num = sum((function(){
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = askedByRatio).length; i$ < len$; ++i$) {
            it = ref$[i$];
            results$.push(it.value);
          }
          return results$;
        }()));
        for (i$ = 0, len$ = askedByRatio.length; i$ < len$; ++i$) {
          it = askedByRatio[i$];
          it.value /= num;
        }
        z$ = d3.select('#asked-by').selectAll('div.avatar').data(askedByRatio);
        z$.exit().remove();
        z$.enter().append('div').attr('class', 'avatar').each(function(){
          var x$;
          x$ = d3.select(this);
          x$.append('div').attr('class', 'img').append('img');
          x$.append('div').attr('class', 'title');
          x$.append('div').attr('class', 'times');
          return x$;
        });
        d3.select('#asked-by').selectAll('div.avatar').each(function(d){
          var x$;
          x$ = d3.select(this);
          x$.select('img').attr('src', function(){
            var avatar;
            avatar = CryptoJS.MD5("MLY/" + d.name).toString();
            return "http://avatars.io/50a65bb26e293122b0000073/" + avatar + "?size=medium";
          }).style('width', function(){
            var ref$, ref1$;
            return ((ref$ = (ref1$ = d.value * 400) > 15 ? ref1$ : 15) < 50 ? ref$ : 50) + "px";
          }).style('height', function(){
            var ref$, ref1$;
            return ((ref$ = (ref1$ = d.value * 400) > 15 ? ref1$ : 15) < 50 ? ref$ : 50) + "px";
          }).style('border', function(){
            return "3px solid " + partyColor(lg[d.name].party);
          });
          x$.select('div.title').text(function(){
            return d.name;
          });
          x$.select('div.times').text(function(){
            return d.count;
          });
          x$.on('click', function(){
            askedByFilter.filter(d.name);
            return update(words.category.filter.top(Infinity));
          });
          return x$;
        });
        console.log('oko');
        d55 = new Date();
        group = {};
        ['topic', 'category', 'keywords'].map(function(n){
          var dd1, i$, ref$, len$, it, j$, ref1$, len1$, v, ref2$, t, dmax, dd2, x$, dd3;
          dd1 = new Date();
          (group[n] || (group[n] = {})).group = words.keywords.filter.group().top(Infinity);
          group[n].hash = {};
          for (i$ = 0, len$ = (ref$ = group[n].group).length; i$ < len$; ++i$) {
            it = ref$[i$];
            for (j$ = 0, len1$ = (ref1$ = it.key).length; j$ < len1$; ++j$) {
              v = ref1$[j$];
              (ref2$ = group[n].hash)[v] >= 0 || (ref2$[v] = 0);
              group[n].hash[v] += it.value;
            }
          }
          ref$ = [0, 99999], group[n].max = ref$[0], group[n].min = ref$[1];
          for (i$ = 0, len$ = (ref$ = words[n].list).length; i$ < len$; ++i$) {
            t = ref$[i$];
            v = group[n].hash[t.text];
            if (v) {
              (ref1$ = group[n]).max >= v || (ref1$.max = v);
              (ref1$ = group[n]).min <= v || (ref1$.min = v);
            }
          }
          dmax = group[n].max - group[n].min;
          for (i$ = 0, len$ = (ref$ = words[n].list).length; i$ < len$; ++i$) {
            it = ref$[i$];
            it.size = 12 + (((group[n].hash[it.text] || group[n].min) - group[n].min) / dmax) * 10;
          }
          dd2 = new Date();
          x$ = d3.select("#" + n + " .desc").selectAll('.tag').data(words[n].list);
          x$.exit().remove();
          x$.enter().append('div').attr('class', 'tag');
          d3.selectAll("#" + n + " .desc .tag").text(function(it){
            return it.text;
          }).style('font-size', function(it){
            return it.size + "px";
          }).attr('class', function(d, i){
            if (i === words[n].list.length - 1) {
              return "tag end";
            } else {
              return "tag";
            }
          });
          /*
          # cloud is quite slow, bottleneck on getImageData. not using it for now.
          d3.layout.cloud!size [500,200] .words words[n]list
            .padding 0
            .rotate -> ~~(Math.random!*20 - 10)
            .font "century gothic"
            .fontSize -> it.size
            .on \end ->
              d3.select "\##{n} svg" .append \g .attr \transform "translate(250 100)" .selectAll \text.cloud .data words[n].list
                ..exit!remove!
                ..enter!append \text .attr \class \cloud
                  .style \font-family "century gothic"
                  .attr \text-anchor \middle
              d3.select "\##{n} svg g" .selectAll \text.cloud
                .style \font-size -> "#{it.size}px"
                .style \fill (d,i) -> color i
                .attr \transform -> "translate(#{it.x},#{it.y}) rotate(#{it.rotate})"
                .text -> it.text
            .start!
          */
          dd3 = new Date();
          return console.log(dd2.getTime() - dd1.getTime(), dd3.getTime() - dd2.getTime());
        });
        d6 = new Date();
        x = [d1, d2, d31, d32, d33, d4, d41, d5, d51, d52, d53, d54, d55, d6].map(function(it){
          return it.getTime();
        });
        for (i$ = 0, len$ = (ref$ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]).length; i$ < len$; ++i$) {
          i = ref$[i$];
          results$.push(console.log(i, "to", i + 1, x[i] - x[i - 1]));
        }
        return results$;
      };
      d3.json('twCounty2010.topo.json', function(data){
        var prj, path, svg;
        d41 = new Date();
        topo = topojson.feature(data, data.objects["twCounty2010.geo"]);
        prj = d3.geo.mercator().center([120.979531, 23.978567]).scale(90000);
        path = d3.geo.path().projection(prj);
        svg = d3.select('#county svg');
        svg.selectAll('path.county').data(topo.features).enter().append('path').attr('class', 'county').attr('d', path).style('fill', function(it){
          return color(it.properties.COUNTYNAME);
        }).style('stroke', '#fff').style('stroke-width', '3px');
        return update(words.category.filter.top(Infinity));
      });
      return window.reset = function(){
        constuiencyFilter.filterAll();
        sexFilter.filterAll();
        lastnameFilter.filterAll();
        partyFilter.filterAll();
        words.category.filter.filterAll();
        words.keywords.filter.filterAll();
        words.topic.filter.filterAll();
        askedByFilter.filterAll();
        return update(categoryFilter.top(Infinity));
      };
    });
  });
});