// Generated by LiveScript 1.2.0
var update;
update = null;
$(document).ready(function(){
  var m, ref$, w, h, iw, ih, color, newSvg, lineChart, relationChart;
  m = [20, 10, 20, 100];
  ref$ = [800, 400], w = ref$[0], h = ref$[1];
  ref$ = [w - m[0] - m[2], h - m[1] - m[3]], iw = ref$[0], ih = ref$[1];
  color = d3.scale.category20b();
  newSvg = function(cls, parent){
    parent == null && (parent = d3.select('body'));
    return parent.append('svg').attr('class', cls).attr('width', '100%').attr('height', '100%').attr('viewBox', "0 0 " + w + " " + h).attr('preserveAspectRatio', "xMidYMid");
  };
  lineChart = function(data){
    var ref$, weekData, monthData, i$, len$, i, v, j$, ref1$, len1$, j, buildChart;
    data = data.by_date_per_day;
    ref$ = [[], []], weekData = ref$[0], monthData = ref$[1];
    for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
      i = ref$[i$];
      v = [data[i][0], 0];
      for (j$ = 0, len1$ = (ref1$ = [0, 1, 2, 3, 4, 5, 6, 7]).length; j$ < len1$; ++j$) {
        j = ref1$[j$];
        if (!data[i + j]) {
          break;
        }
        v[1] += data[i + j][1];
      }
      v[1] /= 7;
      weekData.push(v);
    }
    for (i$ = 0, len$ = (ref$ = (fn1$())).length; i$ < len$; ++i$) {
      i = ref$[i$];
      v = [data[i][0], 0];
      for (j$ = 0, len1$ = (ref1$ = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]).length; j$ < len1$; ++j$) {
        j = ref1$[j$];
        if (!data[i + j]) {
          break;
        }
        v[1] += data[i + j][1];
      }
      v[1] /= 30;
      monthData.push(v);
    }
    buildChart = function(data, parent){
      var lineChart, barWidth, y, it, x, x2, xAxis, yAxis, x$;
      lineChart = newSvg('line-chart', parent);
      barWidth = iw / data.length;
      y = d3.scale.linear().domain([
        0, d3.max((function(){
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = data).length; i$ < len$; ++i$) {
            it = ref$[i$];
            results$.push(it[1]);
          }
          return results$;
        }()))
      ]).range([h - m[3], m[1]]);
      x = d3.scale.ordinal().domain((function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = data).length; i$ < len$; ++i$) {
          it = ref$[i$];
          results$.push(it[0]);
        }
        return results$;
      }())).rangePoints([m[0] + barWidth / 2, w - m[2] - barWidth / 2]);
      x2 = d3.scale.ordinal().domain((function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = data).length; i$ < len$; ++i$) {
          it = ref$[i$];
          results$.push(it[0]);
        }
        return results$;
      }())).rangePoints([m[0], w - m[2]]);
      xAxis = d3.svg.axis().scale(x2).orient('bottom').tickValues([1, 2, 3, 4, 5].map(function(it){
        return data[parseInt(it * 2 * (data.length - 1) / 12)][0];
      }));
      yAxis = d3.svg.axis().scale(y).orient('left');
      x$ = lineChart.append('g').attr('class', 'bar-group').selectAll('rect').data(data);
      x$.enter().append('rect').attr('width', barWidth * 0.8).attr('height', function(it){
        return h - y(it[1]) - m[3];
      }).attr('x', function(it){
        return x(it[0]) - barWidth * 0.4;
      }).attr('y', function(it){
        return y(it[1]);
      }).attr('fill', '#f94');
      lineChart.append('g').attr('transform', "translate(0 " + (h - m[3]) + ")").call(xAxis);
      return lineChart.append('g').attr('transform', "translate(" + m[0] + " 0)").call(yAxis);
    };
    buildChart(weekData, d3.select('#line-chart1'));
    return buildChart(monthData, d3.select('#line-chart2'));
    function fn$(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = data.length - 1; i$ <= to$; i$ += 7) {
        results$.push(i$);
      }
      return results$;
    }
    function fn1$(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = data.length - 1; i$ <= to$; i$ += 30) {
        results$.push(i$);
      }
      return results$;
    }
  };
  relationChart = function(data){
    var force, hash, it, jt, nodes, links, sel, i$, len$, j$, ref$, ref1$, x, len1$, svg, dim, x$, linkTag, y$, z$, nodeTag, z1$, text, lastFind;
    data = data.by_nick_to;
    force = d3.layout.force();
    hash = {};
    for (it in data) {
      for (jt in data[it]) {
        if (!(jt in hash)) {
          hash[jt] = {
            name: jt,
            charge: 1
          };
        }
      }
      hash[it] = {
        name: it,
        d: data[it],
        charge: 1
      };
    }
    nodes = (function(){
      var results$ = [];
      for (it in hash) {
        results$.push(it);
      }
      return results$;
    }()).map(function(d, i){
      hash[d].index = i;
      return hash[d];
    });
    links = [];
    sel = $('#select-name');
    for (i$ = 0, len$ = nodes.length; i$ < len$; ++i$) {
      it = nodes[i$];
      for (j$ = 0, len1$ = (ref$ = [(ref1$ = (fn$()).sort(fn1$))[0], ref1$[1], ref1$[2]]).length; j$ < len1$; ++j$) {
        jt = ref$[j$];
        if (!jt) {
          continue;
        }
        links.push({
          source: hash[it.name],
          target: hash[jt]
        });
        hash[jt].charge++;
      }
    }
    nodes.sort(function(a, b){
      if (a.name > b.name) {
        return 1;
      } else if (a.name === b.name) {
        return 0;
      } else {
        return -1;
      }
    }).map(function(it){
      return sel.append("<option value='" + it.name + "'>" + it.name + "</option>");
    });
    force.nodes(nodes).links(links).size([w, h]).gravity(0.5).charge(function(it){
      return -Math.pow(it.charge, 2) - 30;
    }).start();
    svg = newSvg('relation-chart', d3.select('#relation-chart'));
    dim = $('#relation-chart').offset();
    x$ = linkTag = svg.selectAll('line.link').data(links);
    y$ = x$.enter().append('g').attr('class', 'link-group');
    y$.append('line').attr('class', 'link').attr('stroke-width', '1px').attr('stroke', '#ccc').attr('stroke-dasharray', "3,1");
    z$ = nodeTag = svg.selectAll('circle.node').data(nodes);
    z1$ = z$.enter().append('g').attr('class', 'node-group');
    z1$.append('circle').attr('class', 'node').attr('r', function(it){
      return 2 + Math.sqrt(it.charge);
    }).attr('fill', function(it){
      return color(it.name);
    }).on('mouseover', function(it){
      return text.show().css({
        left: d3.event.pageX,
        top: d3.event.pageY + 15
      }).text(it.name).delay(1000).fadeOut();
    }).call(force.drag);
    text = $('#relation-name');
    lastFind = {
      r: null,
      charge: 0
    };
    update = function(){
      var v, r;
      v = $('#select-name').val().trim();
      if (!(v in hash)) {
        return;
      }
      if (lastFind.r) {
        lastFind.r.charge = lastFind.charge;
        lastFind.r.active = 0;
      }
      r = hash[v];
      lastFind.r = r;
      lastFind.charge = r.charge;
      r.charge = -100;
      r.active = 1;
      return force.start();
    };
    return force.on('tick', function(){
      linkTag.selectAll('line.link').attr('x1', function(it){
        return it.source.x;
      }).attr('y1', function(it){
        return it.source.y;
      }).attr('x2', function(it){
        return it.target.x;
      }).attr('y2', function(it){
        return it.target.y;
      });
      return nodeTag.selectAll('circle.node').attr('cx', function(it){
        return it.x;
      }).attr('cy', function(it){
        return it.y;
      }).attr('stroke', function(it){
        if (it.active) {
          return '#f00';
        } else {
          return 'none';
        }
      });
    });
    function fn$(){
      var results$ = [];
      for (x in it.d) {
        results$.push(x);
      }
      return results$;
    }
    function fn1$(a, b){
      return it.d[a] - it.d[b];
    }
  };
  return d3.json('http://kcwu.csie.org/~kcwu/ircstat/g0v-count.json', function(data){
    console.log(data);
    lineChart(data);
    return relationChart(data);
  });
});