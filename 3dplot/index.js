// Generated by LiveScript 1.2.0
var mainCtrl, replace$ = ''.replace;
google.load('visualization', '1');
mainCtrl = function($scope){
  $scope.dateIdx = 0;
  $scope.dateString = "";
  $scope.tooltip = {};
  $scope.gridData = {};
  $scope.siteHash = {};
  $scope.dateFormat = function(it){
    var ret;
    ret = /(\d+)年(\d+)月/.exec(it);
    return ret[1] + "." + (~~ret[2] > 9 ? "" : '0') + ret[2];
  };
  $scope.range = {
    lat: {},
    lng: {},
    num: {}
  };
  $scope.prj = d3.geo.mercator().center([121.51833286913558, 25.09823258363324]).scale(120000);
  $scope.num = {
    r: 60,
    c: 60
  };
  return google.setOnLoadCallback(function(){
    var data, i, d, plot, fillPly, colour1, colour2, colour3, colour4, colour5, colours, xAxisHeader, yAxisHeader, zAxisHeader, options;
    data = new google.visualization.DataTable();
    (function(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = $scope.num.c; i$ < to$; ++i$) {
        i = i$;
        results$.push(i);
      }
      return results$;
    }()).map(function(){
      return data.addColumn('number', "col" + i);
    });
    data.addRows($scope.num.r);
    d = 360 / $scope.num.r;
    plot = new greg.ross.visualisation.SurfacePlot(document.getElementById('viewport'));
    fillPly = true;
    colour1 = {
      red: 0,
      green: 0,
      blue: 255
    };
    colour2 = {
      red: 0,
      green: 255,
      blue: 255
    };
    colour3 = {
      red: 0,
      green: 255,
      blue: 0
    };
    colour4 = {
      red: 255,
      green: 255,
      blue: 0
    };
    colour5 = {
      red: 255,
      green: 0,
      blue: 0
    };
    colours = [colour1, colour2, colour3, colour4, colour5];
    xAxisHeader = "經度";
    yAxisHeader = "緯度";
    zAxisHeader = "人數";
    options = {
      xPos: 0,
      yPos: 0,
      width: 600,
      height: 500,
      colourGradient: colours,
      fillPolygons: fillPly,
      tooltips: $scope.tooltip,
      xTitle: xAxisHeader,
      yTitle: yAxisHeader,
      zTitle: zAxisHeader,
      restrictXRotation: false
    };
    return d3.csv('latlng.utf-8.csv', function(rawSite){
      var i$, len$, it, name, loadPx;
      for (i$ = 0, len$ = rawSite.length; i$ < len$; ++i$) {
        it = rawSite[i$];
        name = (replace$.call(it.NAME, /站.*$/, '')).trim();
        name = name.replace(/臺/g, '台');
        if (name === "台北車") {
          name = "台北車站";
        }
        $scope.siteHash[name] = import$({
          name: name,
          weight: 1,
          flow: {},
          price: {}
        }, coord.toGws84(it.X, it.Y));
      }
      loadPx = function(flow){
        var px, dates, inout, sites, count, i$, len$, d, j$, len1$, io, k$, len2$, s, v, ref$;
        px = new Px(flow);
        dates = px.metadata.VALUES.年月別.map(function(it){
          return $scope.dateFormat(it);
        });
        inout = px.metadata.VALUES.入出站別;
        sites = px.metadata.VALUES.項目;
        count = 0;
        for (i$ = 0, len$ = dates.length; i$ < len$; ++i$) {
          d = dates[i$];
          for (j$ = 0, len1$ = inout.length; j$ < len1$; ++j$) {
            io = inout[j$];
            for (k$ = 0, len2$ = sites.length; k$ < len2$; ++k$) {
              s = sites[k$];
              s = (replace$.call(s, /站.*$/, '')).trim();
              s = s.replace(/臺/g, '台');
              if (s === '台北') {
                s = '台北車站';
              }
              if (!$scope.siteHash[s]) {
                count += 1;
                continue;
              }
              v = px.data[count];
              $scope.siteHash[s].flow[d] = v === '"."'
                ? 0
                : (ref$ = Math.sqrt(~~v) / 100) > 2 ? ref$ : 2;
              count += 1;
            }
          }
        }
        return px;
      };
      return $.ajax('flow.utf-8.px').done(function(flow){
        return $.ajax('meow.utf-8.px').done(function(meow){
          var px, dates, k, v, ref$, x, y, d, ref1$, init, grid, lo, update, iterate;
          px = loadPx(flow);
          loadPx(meow);
          dates = px.metadata.VALUES.年月別.map(function(it){
            return $scope.dateFormat(it);
          });
          for (k in $scope.siteHash) {
            v = $scope.siteHash[k];
            ref$ = $scope.prj([v.lng, v.lat]), x = ref$[0], y = ref$[1];
            (ref$ = $scope.range.lat).min <= y || (ref$.min = y);
            (ref$ = $scope.range.lat).max >= y || (ref$.max = y);
            (ref$ = $scope.range.lng).min <= x || (ref$.min = x);
            (ref$ = $scope.range.lng).max >= x || (ref$.max = x);
            v.x = x;
            v.y = y;
            for (k in ref$ = v.flow) {
              d = ref$[k];
              (ref1$ = $scope.range.num).min <= d || (ref1$.min = d);
              (ref1$ = $scope.range.num).max >= d || (ref1$.max = d);
            }
          }
          init = function(){
            var i$, to$, i, lresult$, j$, to1$, j, results$ = [];
            for (i$ = 0, to$ = $scope.num.r; i$ < to$; ++i$) {
              i = i$;
              lresult$ = [];
              for (j$ = 0, to1$ = $scope.num.c; j$ < to1$; ++j$) {
                j = j$;
                lresult$.push(data.setValue(i, j, 0));
              }
              results$.push(lresult$);
            }
            return results$;
          };
          grid = {
            x: d3.scale.linear().domain([$scope.range.lng.min, $scope.range.lng.max]).range([0, $scope.num.c]),
            y: d3.scale.linear().domain([$scope.range.lat.min, $scope.range.lat.max]).range([0, $scope.num.r]),
            z: d3.scale.linear().domain([$scope.range.num.min, $scope.range.num.max]).range([0, 1])
          };
          lo = 3;
          update = function(){
            var max, k, ref$, v, ref1$, x, y, i$, to$, i, j$, to1$, j, d, ratio, value, key, idx;
            max = 0;
            for (k in $scope.gridData) {
              $scope.gridData[k] = 0;
            }
            for (k in ref$ = $scope.siteHash) {
              v = ref$[k];
              ref1$ = [parseInt(grid.x(v.x)), parseInt(grid.y(v.y))], x = ref1$[0], y = ref1$[1];
              for (i$ = y - 6, to$ = y + 6; i$ <= to$; ++i$) {
                i = i$;
                for (j$ = x - 6, to1$ = x + 6; j$ <= to1$; ++j$) {
                  j = j$;
                  d = Math.pow(Math.pow(y - i, 2) + Math.pow(x - j, 2), 0.5);
                  ratio = Math.exp((-d * d) / (2 * lo * lo));
                  if (i < 0 || j < 0 || i >= $scope.num.r || j >= $scope.num.c) {
                    continue;
                  }
                  value = grid.z(v.flow[$scope.dateString] || 0) * ratio;
                  key = i + "-" + j;
                  if (!(key in $scope.gridData)) {
                    $scope.gridData[key] = 0;
                  }
                  $scope.gridData[key] += value;
                  max >= (ref1$ = $scope.gridData[key]) || (max = ref1$);
                  if (d <= 3) {
                    $scope.tooltip[i * $scope.num.c + j] = v.name;
                  }
                }
              }
            }
            for (i$ = 0, to$ = $scope.num.r; i$ < to$; ++i$) {
              i = i$;
              for (j$ = 0, to1$ = $scope.num.c; j$ < to1$; ++j$) {
                j = j$;
                idx = i * $scope.num.c + j;
                if (!$scope.tooltip[idx]) {
                  $scope.tooltip[idx] = "";
                }
                data.setValue(i, j, ($scope.gridData[i + "-" + j] || 0) / max);
              }
            }
            return options.tooltips = $scope.tooltip;
          };
          $scope.dates = dates;
          init();
          iterate = function(){
            $scope.$apply(function(){
              $scope.dateIdx = ($scope.dateIdx + 1) % $scope.dates.length;
              return $scope.dateString = $scope.dates[$scope.dateIdx];
            });
            update();
            return plot.draw(data, options);
          };
          iterate();
          return setInterval(iterate, 1000);
        });
      });
    });
  });
};
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}