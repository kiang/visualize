// Generated by LiveScript 1.2.0
var mrtCtrl, replace$ = ''.replace;
mrtCtrl = function($scope){
  $scope.siteHash = {
    a: 1,
    b: 2
  };
  $scope.links = [];
  $scope.dindex = 0;
  $scope.color = d3.scale.linear().domain([0, 10]).range(['blue', 'red']);
  $scope.prj = d3.geo.mercator().center([121.51833286913558, 25.09823258363324]).scale(120000);
  $scope.coloring = function(it){
    return $scope.color(it);
  };
  $scope.force = d3.layout.force().gravity(0.3).charge(function(it){
    if (!it.name) {
      return -30;
    }
    return -it.name.length * 100;
  }).on('tick', function(){
    var x, res$;
    res$ = [];
    for (x in $scope.siteHash) {
      res$.push(x);
    }
    x = res$;
    return $scope.$apply(function(){
      return $scope.siteHash = $scope.siteHash;
    });
  });
  return d3.csv('latlng.utf-8.csv', function(rawSite){
    var i$, len$, it, name;
    for (i$ = 0, len$ = rawSite.length; i$ < len$; ++i$) {
      it = rawSite[i$];
      name = (replace$.call(it.NAME, /站.*$/, '')).trim();
      name = name.replace(/臺/g, '台');
      if (name === "台北車") {
        name = "台北車站";
      }
      $scope.siteHash[name] = import$({
        name: name,
        weight: 1
      }, coord.toGws84(it.X, it.Y));
    }
    return $.ajax('pair.json').done(function(rawLinks){
      var links, i$, len$, path, j$, to$, i, src, des;
      rawLinks = JSON.parse(rawLinks);
      links = [];
      for (i$ = 0, len$ = rawLinks.length; i$ < len$; ++i$) {
        path = rawLinks[i$];
        for (j$ = 1, to$ = path.length; j$ < to$; ++j$) {
          i = j$;
          src = $scope.siteHash[path[i - 1]];
          des = $scope.siteHash[path[i]];
          links.push({
            source: $scope.siteHash[path[i - 1]],
            target: $scope.siteHash[path[i]]
          });
        }
      }
      $scope.$apply(function(){
        return $scope.links = links;
      });
      return $.ajax('flow.utf-8.px').done(function(flow){
        var px, dates, inout, sites, count, i$, len$, d, j$, len1$, io, k$, len2$, s, v;
        px = new Px(flow);
        dates = px.metadata.VALUES.年月別;
        inout = px.metadata.VALUES.入出站別;
        sites = px.metadata.VALUES.項目;
        count = 0;
        for (i$ = 0, len$ = dates.length; i$ < len$; ++i$) {
          d = dates[i$];
          for (j$ = 0, len1$ = inout.length; j$ < len1$; ++j$) {
            io = inout[j$];
            for (k$ = 0, len2$ = sites.length; k$ < len2$; ++k$) {
              s = sites[k$];
              s = (replace$.call(s, /站.*$/, '')).trim();
              s = s.replace(/臺/g, '台');
              if (s === '台北') {
                s = '台北車站';
              }
              if (!$scope.siteHash[s]) {
                count += 1;
                continue;
              }
              v = px.data[count];
              $scope.siteHash[s][d] = v === '"."'
                ? 0
                : Math.sqrt(~~v) / 100;
              count += 1;
            }
          }
        }
        $scope.$apply(function(){
          var k, v, ref$, x, y;
          for (k in $scope.siteHash) {
            v = $scope.siteHash[k];
            ref$ = $scope.prj([v.lng, v.lat]), x = ref$[0], y = ref$[1];
            v.x = x;
            v.y = y;
          }
          $scope.dates = dates;
          $scope.force.nodes((function(){
            var results$ = [];
            for (x in $scope.siteHash) {
              results$.push($scope.siteHash[x]);
            }
            return results$;
          }())).links($scope.links).size([900, 700]).start();
          return $scope.siteHash = $scope.siteHash;
        });
        return setInterval(function(){
          return $scope.$apply(function(){
            return $scope.dindex = ($scope.dindex + 1) % dates.length;
          });
        }, 200);
      });
    });
  });
};
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}