// Generated by LiveScript 1.2.0
var mrtCtrl, replace$ = ''.replace;
mrtCtrl = function($scope){
  $scope.siteHash = {};
  $scope.links = [];
  $scope.dindex = 0;
  $scope.dateHite = 60;
  $scope.play = true;
  $scope.legend = [100000, 500000, 900000, 1300000, 1700000, 2100000, 2500000, 2900000].map(function(it){
    return [it / 1000 + "萬", Math.sqrt(it) / 100];
  });
  $scope.color = d3.scale.linear().domain([0, 15]).range(['blue', 'red']);
  $scope.prj = d3.geo.mercator().center([121.51833286913558, 25.09823258363324]).scale(120000);
  $scope.coloring = function(it){
    return $scope.color(it);
  };
  $scope.v1 = function(it){
    return it > 1;
  };
  $scope.v2 = function(link, date){
    return link.source[date] > 1 && link.target[date] > 1;
  };
  $scope.togglePlay = function(){
    return $scope.play = !$scope.play;
  };
  $scope.setDate = function(e){
    var offset, ref$, x, y, ref1$, ref2$;
    offset = $('#svg').offset();
    ref$ = [e.clientX - offset.left, e.clientY - offset.top], x = ref$[0], y = ref$[1];
    if ($scope.dates && x < 40) {
      $scope.dindex = parseInt($scope.dates.length * ((y - 60) / 420));
      $scope.dindex = (ref$ = (ref2$ = $scope.dindex) > 0 ? ref2$ : 0) < (ref1$ = $scope.dates.length) ? ref$ : ref1$;
      return $scope.dateHite = $scope.datebar($scope.dindex);
    }
  };
  $scope.force = d3.layout.force().gravity(0.5).charge(function(it){
    if (!it.name) {
      return -30;
    }
    return -it.name.length * 100;
  }).on('tick', function(){
    var x, res$;
    res$ = [];
    for (x in $scope.siteHash) {
      res$.push(x);
    }
    x = res$;
    return $scope.$apply(function(){
      return $scope.siteHash = $scope.siteHash;
    });
  });
  return d3.csv('latlng.utf-8.csv', function(rawSite){
    var i$, len$, it, name, loadPx;
    for (i$ = 0, len$ = rawSite.length; i$ < len$; ++i$) {
      it = rawSite[i$];
      name = (replace$.call(it.NAME, /站.*$/, '')).trim();
      name = name.replace(/臺/g, '台');
      if (name === "台北車") {
        name = "台北車站";
      }
      $scope.siteHash[name] = import$({
        name: name,
        weight: 1
      }, coord.toGws84(it.X, it.Y));
    }
    loadPx = function(flow){
      var px, dates, inout, sites, count, i$, len$, d, j$, len1$, io, k$, len2$, s, v, ref$;
      px = new Px(flow);
      dates = px.metadata.VALUES.年月別;
      inout = px.metadata.VALUES.入出站別;
      sites = px.metadata.VALUES.項目;
      count = 0;
      for (i$ = 0, len$ = dates.length; i$ < len$; ++i$) {
        d = dates[i$];
        for (j$ = 0, len1$ = inout.length; j$ < len1$; ++j$) {
          io = inout[j$];
          for (k$ = 0, len2$ = sites.length; k$ < len2$; ++k$) {
            s = sites[k$];
            s = (replace$.call(s, /站.*$/, '')).trim();
            s = s.replace(/臺/g, '台');
            if (s === '台北') {
              s = '台北車站';
            }
            if (!$scope.siteHash[s]) {
              count += 1;
              continue;
            }
            v = px.data[count];
            $scope.siteHash[s][d] = v === '"."'
              ? 0
              : (ref$ = Math.sqrt(~~v) / 100) > 2 ? ref$ : 2;
            count += 1;
          }
        }
      }
      return px;
    };
    return $.ajax('pair.json').done(function(rawLinks){
      var links, i$, len$, path, j$, to$, i, src, des;
      if (typeof rawLinks === typeof "") {
        rawLinks = JSON.parse(rawLinks);
      }
      links = [];
      for (i$ = 0, len$ = rawLinks.length; i$ < len$; ++i$) {
        path = rawLinks[i$];
        for (j$ = 2, to$ = path.length; j$ < to$; ++j$) {
          i = j$;
          src = $scope.siteHash[path[i - 1]];
          des = $scope.siteHash[path[i]];
          links.push({
            source: $scope.siteHash[path[i - 1]],
            target: $scope.siteHash[path[i]],
            color: path[0]
          });
        }
      }
      $scope.$apply(function(){
        return $scope.links = links;
      });
      return $.ajax('flow.utf-8.px').done(function(flow){
        return $.ajax('meow.utf-8.px').done(function(meow){
          var px, dates;
          px = loadPx(flow);
          loadPx(meow);
          dates = px.metadata.VALUES.年月別;
          $scope.$apply(function(){
            var k, v, ref$, x, y;
            $scope.datebar = d3.scale.linear().domain([0, dates.length - 1]).range([60, 480]);
            for (k in $scope.siteHash) {
              v = $scope.siteHash[k];
              ref$ = $scope.prj([v.lng, v.lat]), x = ref$[0], y = ref$[1];
              v.x = x;
              v.y = y;
            }
            $scope.dates = dates;
            $scope.force.nodes((function(){
              var results$ = [];
              for (x in $scope.siteHash) {
                results$.push($scope.siteHash[x]);
              }
              return results$;
            }())).links($scope.links).size([1024, 500]).start();
            return $scope.siteHash = $scope.siteHash;
          });
          return setInterval(function(){
            if ($scope.play) {
              return $scope.$apply(function(){
                $scope.dindex = ($scope.dindex + 1) % dates.length;
                $scope.dateHite = $scope.datebar($scope.dindex);
                if (!$scope.force.alpha()) {
                  return $scope.force.start();
                }
              });
            } else {
              return $scope.force.stop();
            }
          }, 200);
        });
      });
    });
  });
};
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}