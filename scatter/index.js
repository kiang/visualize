// Generated by LiveScript 1.2.0
var m, mi, ref$, w, h, main, hannah, loadPx, config, ret;
m = [20, 20, 30, 40];
mi = [10, 10, 20, 20];
ref$ = [900, 600], w = ref$[0], h = ref$[1];
main = function($scope){
  $scope.cat = {
    x: 1,
    y: 1
  };
  $scope.idx = {
    x: 1,
    y: 1
  };
  $scope.area = {
    x: 1,
    y: 1
  };
  $scope.statCat = statCat;
  $scope.statIdx = statIdx;
  $scope.statArea = statArea;
  return $scope.gotolink = function(){
    var s, p;
    s = $scope;
    p = window.location.pathname;
    return window.location.href = p + "?" + parseInt(Math.random() * 10000) + "#" + s.cat.x + "." + s.idx.x + "." + s.area.x + "." + s.cat.y + "." + s.idx.y + "." + s.area.y;
  };
};
hannah = function(d1, d2){
  var nodes, res$, i$, ref$, len$, i, r, links, to$, n1, n2;
  res$ = [];
  for (i$ = 0, len$ = (ref$ = d1.range).length; i$ < len$; ++i$) {
    i = i$;
    r = ref$[i$];
    res$.push({
      x: d1.data[i],
      y: d2.data[i],
      v: ~~r
    });
  }
  nodes = res$;
  res$ = [];
  for (i$ = 1, to$ = nodes.length; i$ < to$; ++i$) {
    i = i$;
    ref$ = [nodes[i - 1], nodes[i]], n1 = ref$[0], n2 = ref$[1];
    res$.push({
      v: n1.v,
      src: {
        x: n1.x,
        y: n1.y
      },
      des: {
        x: n2.x,
        y: n2.y
      }
    });
  }
  links = res$;
  return {
    nodes: nodes,
    links: links
  };
};
loadPx = function(data, idx, ldx){
  var px, index, range, local, offset, x$, ret, i, r;
  px = new Px(data);
  index = px.metadata.VALUES.指標;
  range = px.metadata.VALUES.期間;
  local = px.metadata.VALUES.縣市;
  offset = idx * range.length * local.length;
  x$ = ret = {
    data: (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = range).length; i$ < len$; ++i$) {
        i = i$;
        r = ref$[i$];
        results$.push(parseFloat(px.data[offset + i * local.length + ldx]) || 0);
      }
      return results$;
    }()),
    local: local[ldx],
    index: index[idx],
    range: range
  };
  x$.min = d3.min(ret.data);
  x$.max = d3.max(ret.data);
  x$.size = ret.max - ret.min;
  return ret;
};
config = {
  d1: {
    path: 3,
    idx: 2,
    loc: 3
  },
  d2: {
    path: 13,
    idx: 0,
    loc: 3
  }
};
console.log(JSON.stringify(config));
ret = /#(\d+)\.(\d+)\.(\d+)\.(\d+)\.(\d+)\.(\d+)$/.exec(window.location.href);
if (ret) {
  config.d1 = {
    path: ~~ret[1],
    idx: ~~ret[2],
    loc: ~~ret[3]
  };
  config.d2 = {
    path: ~~ret[4],
    idx: ~~ret[5],
    loc: ~~ret[6]
  };
}
$.ajax("data/" + config.d1.path + ".px").done(function(d1){
  return $.ajax("data/" + config.d2.path + ".px").done(function(d2){
    var px1, px2, xAxis, yAxis, hd, x$, y$, i, z$, z1$, z2$, z3$, z4$, z5$, z6$;
    px1 = loadPx(d1, config.d1.idx, config.d1.loc);
    px2 = loadPx(d2, config.d2.idx, config.d2.loc);
    xAxis = d3.scale.linear().domain([px1.min, px1.max]).range([m[3] + mi[3], w - m[1] - m[3] - mi[1] - mi[3]]);
    yAxis = d3.scale.linear().domain([px2.min, px2.max]).range([h - m[0] - m[2] - mi[0] - mi[2], m[0] + mi[0]]);
    hd = hannah(px1, px2);
    x$ = d3.select('#label');
    x$.append('g').attr('class', 'axis x-axis').append('path').attr('class', 'base').attr('d', function(){
      return "M" + m[3] + " " + (h - m[2] - m[0]) + "L" + (w - m[3] - m[1]) + " " + (h - m[2] - m[0]);
    });
    x$.append('g').attr('class', 'axis y-axis').append('path').attr('class', 'base').attr('d', function(){
      return "M" + m[3] + " " + m[0] + "L" + m[3] + " " + (h - m[2] - m[0]);
    });
    if (px1.size === 0 || px2.size === 0) {
      return;
    }
    y$ = d3.select('#label g.x-axis').selectAll('path.tick').data((function(){
      var i$, step$, to$, results$ = [];
      for (i$ = px1.min, to$ = px1.max, step$ = px1.size / 10; step$ < 0 ? i$ >= to$ : i$ <= to$; i$ += step$) {
        i = i$;
        results$.push([xAxis(i), i]);
      }
      return results$;
    }()));
    z$ = y$.enter().append('g');
    z$.attr('transform', function(it){
      return "translate(" + it[0] + " " + (h - m[2] - m[0]) + ")";
    });
    z$.append('path').attr('class', 'tick').attr('d', function(){
      return "M0 0 L0 5";
    });
    z$.append('text').attr('dy', '12px').text(function(it){
      return (it[1] + "").substring(0, 4);
    });
    y$.exit().remove();
    z1$ = d3.select('#label g.y-axis').selectAll('path.tick').data((function(){
      var i$, step$, to$, results$ = [];
      for (i$ = px2.min, to$ = px2.max, step$ = px2.size / 10; step$ < 0 ? i$ >= to$ : i$ <= to$; i$ += step$) {
        i = i$;
        results$.push([yAxis(i), i]);
      }
      return results$;
    }()));
    z2$ = z1$.enter().append('g');
    z2$.attr('transform', function(it){
      return "translate(" + m[3] + " " + it[0] + ")";
    });
    z2$.append('path').attr('class', 'tick').attr('d', function(){
      return "M0 0 L-5 0";
    });
    z2$.append('text').attr('dy', '14px').attr('transform', "rotate(90)").text(function(it){
      return (it[1] + "").substring(0, 4);
    });
    z1$.exit().remove();
    d3.select('#label').append('g').attr('transform', "translate(5 300)").append('text').attr('transform', "rotate(90)").text(function(){
      return px2.local + " / " + px2.index;
    });
    d3.select('#label').append('g').attr('transform', "translate(450 580)").append('text').text(function(){
      return px1.local + " / " + px1.index;
    });
    z3$ = d3.select('#chart').selectAll('g.link').data(hd.links);
    z4$ = z3$.enter().append('g');
    z4$.attr('class', 'link');
    z4$.append('line').attr('x1', function(it){
      return xAxis(it.src.x);
    }).attr('y1', function(it){
      return yAxis(it.src.y);
    }).attr('x2', function(it){
      return xAxis(it.des.x);
    }).attr('y2', function(it){
      return yAxis(it.des.y);
    }).attr('stroke', function(it){
      if (it.v < 2000) {
        return '#f00';
      }
      if (it.v < 2008) {
        return '#0c0';
      }
      return '#00c';
    });
    z3$.exit().remove();
    z5$ = d3.select('#chart').selectAll('g.node').data(hd.nodes);
    z6$ = z5$.enter().append('g');
    z6$.attr('class', 'node');
    z6$.attr('transform', function(it){
      return "translate(" + xAxis(it.x) + ", " + yAxis(it.y) + ")";
    });
    z6$.append('circle').attr('r', '3px').attr('stroke', function(it){
      if (it.v < 2000) {
        return '#f00';
      }
      if (it.v < 2008) {
        return '#0c0';
      }
      return '#00c';
    });
    z6$.append('text').attr('dy', '14px').text(function(it){
      return it.v + "";
    });
    z5$.exit().remove();
    return z5$;
  });
});